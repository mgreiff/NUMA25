% ~~~~~~~~ Convergence tests ~~~~~~~~~
%% Simple test using a simple quadratic function of order p
% Note that the convergence data in the report was generated by setting
% the step length alpha to 1 at all times and using a single for loop.
p = 8;
f = @(x) ((x(1) + 2).^p + (x(2) - 2).^p);
start = [10;10];
tol = 1e-6;
printout = 1;
[x , fval] = nonlinearmin(f , start , 'BFGS' , tol , printout)
[x , fval] = nonlinearmin(f , start , 'DFP' , tol , printout)

% ~~~~~~~~ Consistency tests ~~~~~~~~~
%% Test BFGS
disp('Testing the simple function with BFGS')
f = @(x) (x(1) + 2).^2 + (x(2) - 2).^2 + (x(2) - 2).^4;
errtol = 0.01;
successfulRuns = 0;
failedRuns = 0;
faiedPoints = [];
for ii = 1:50
    if mod(ii,10) == 0
        disp(['At iteration:',num2str(ii)])
    end
    start = [randi([-200,200]); randi([-200,200])];
    [x , fval] = nonlinearmin(f , start , 'BFGS' , 1e-6 , 0);
    if norm(x-[-2;2]) > errtol || abs(fval) > errtol
        failedRuns = failedRuns + 1;
        faiedPoints = [faiedPoints,start];
    else
        successfulRuns = successfulRuns + 1;
    end
end
disp(['Number of successful runs: ', num2str(successfulRuns)])
disp(['Number of failed runs: ', num2str(failedRuns)])

%% Test DFP
disp('Testing the simple function with DFP')
f = @(x) (x(1) + 2).^2 + (x(2) - 2).^2 + (x(2) - 2).^4;
errtol = 0.01;
successfulRuns = 0;
failedRuns = 0;
faiedPoints = [];
for ii = 1:50
    if mod(ii,10) == 0
        disp(['At iteration:',num2str(ii)])
    end
    start = [randi([-200,200]); randi([-200,200])];
    [x , fval] = nonlinearmin(f , start , 'DFP' , 1e-6 , 0);
    if norm(x-[-2;2]) > errtol || abs(fval) > errtol
        failedRuns = failedRuns + 1;
        faiedPoints = [faiedPoints,start];
    else
        successfulRuns = successfulRuns + 1;
    end
end
disp(['Number of successful runs: ', num2str(successfulRuns)])
disp(['Number of failed runs: ', num2str(failedRuns)])

%% Test rosenbrock BFGS [200,200]
format long;
disp('Testing rosenbrock with BFGS from [200,200]')
start = [200; 200];
tic
[x , fval] = nonlinearmin(@rosenbrock , start , 'BFGS' , 1e-6 , 0)
toc
format short;

%% Test rosenbrock DFP [200,200]
format long;
disp('Testing rosenbrock with DFP from [200,200]')
start = [200;200];
tic
[x , fval] = nonlinearmin(@rosenbrock , start , 'DFP' , 1e-6 ,0)
toc
format short;

%% Test BFGS
disp('Consistency test on BFGS using Rosenbrock...')
errtol = 1e-3;
successfulRuns = 0;
failedRuns = 0;
faiedPoints = [];
for ii = 1:50
    if mod(ii,10) == 0
        disp(['At iteration:',num2str(ii)])
    end
    start = [randi([-200,200]); randi([-200,200])];
    [x , fval] = nonlinearmin(@rosenbrock , start , 'BFGS' , 1e-6 , 0);
    if any(abs(x - [1;1]) > errtol) || abs(fval) > errtol
        failedRuns = failedRuns + 1;
        faiedPoints = [faiedPoints,start];
    else
        successfulRuns = successfulRuns + 1;
    end
end
disp('Results:')
disp(['Number of successful runs: ', num2str(successfulRuns)])
disp(['Number of failed runs: ', num2str(failedRuns)])


%% Test DFP
disp('Consistency test on DFP using Rosenbrock...')
errtol = 1e-3;
successfulRuns = 0;
failedRuns = 0;
faiedPoints = [];
for ii = 1:50
    if mod(ii,10) == 0
        disp(['At iteration:',num2str(ii)])
    end
    start = [randi([-200,200]); randi([-200,200])];
    [x , fval] = nonlinearmin(@rosenbrock , start , 'DFP' , 1e-6 , 0);
    if any(abs(x - [1;1]) > errtol) || abs(fval) > errtol
        failedRuns = failedRuns + 1;
        faiedPoints = [faiedPoints,start];
    else
        successfulRuns = successfulRuns + 1;
    end
end
disp('Results:')
disp(['Number of successful runs: ', num2str(successfulRuns)])
disp(['Number of failed runs: ', num2str(failedRuns)])